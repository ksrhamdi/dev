/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { AriaDescriber } from '@angular/cdk/a11y';
import { ElementRef, NgZone, OnDestroy, Renderer2 } from '@angular/core';
import { ThemePalette, CanDisableCtor, CanDisable } from '@angular/material/core';
/** @docs-private */
import * as ɵngcc0 from '@angular/core';
export declare class MatBadgeBase {
}
export declare const _MatBadgeMixinBase: CanDisableCtor & typeof MatBadgeBase;
export declare type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';
export declare type MatBadgeSize = 'small' | 'medium' | 'large';
/** Directive to display a text badge. */
export declare class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {
    private _document;
    private _ngZone;
    private _elementRef;
    private _ariaDescriber;
    /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */
    private _renderer?;
    /** Whether the badge has any content. */
    _hasContent: boolean;
    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */
    color: ThemePalette;
    private _color;
    /** Whether the badge should overlap its contents or not */
    overlap: boolean;
    private _overlap;
    /**
     * Position the badge should reside.
     * Accepts any combination of 'above'|'below' and 'before'|'after'
     */
    position: MatBadgePosition;
    /** The content for the badge */
    content: string;
    private _content;
    /** Message used to describe the decorated element via aria-describedby */
    description: string;
    private _description;
    /** Size of the badge. Can be 'small', 'medium', or 'large'. */
    size: MatBadgeSize;
    /** Whether the badge is hidden. */
    hidden: boolean;
    private _hidden;
    /** Unique id for the badge */
    _id: number;
    private _badgeElement;
    constructor(_document: any, _ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _ariaDescriber: AriaDescriber, 
    /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */
    _renderer?: Renderer2 | undefined);
    /** Whether the badge is above the host or not */
    isAbove(): boolean;
    /** Whether the badge is after the host or not */
    isAfter(): boolean;
    ngOnDestroy(): void;
    /** Injects a span element into the DOM with the content. */
    private _updateTextContent;
    /** Creates the badge element */
    private _createBadgeElement;
    /** Sets the aria-label property on the element */
    private _updateHostAriaDescription;
    /** Adds css theme class given the color to the component host */
    private _setColor;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MatBadge>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<MatBadge, "[matBadge]", never, {
    "disabled": "matBadgeDisabled";
    "position": "matBadgePosition";
    "size": "matBadgeSize";
    "color": "matBadgeColor";
    "overlap": "matBadgeOverlap";
    "content": "matBadge";
    "description": "matBadgeDescription";
    "hidden": "matBadgeHidden";
}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFkZ2UuZC50cyIsInNvdXJjZXMiOlsiYmFkZ2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0FBV0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3REEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgR29vZ2xlIExMQyBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gKi9cbmltcG9ydCB7IEFyaWFEZXNjcmliZXIgfSBmcm9tICdAYW5ndWxhci9jZGsvYTExeSc7XG5pbXBvcnQgeyBFbGVtZW50UmVmLCBOZ1pvbmUsIE9uRGVzdHJveSwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUaGVtZVBhbGV0dGUsIENhbkRpc2FibGVDdG9yLCBDYW5EaXNhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwvY29yZSc7XG4vKiogQGRvY3MtcHJpdmF0ZSAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWF0QmFkZ2VCYXNlIHtcbn1cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IF9NYXRCYWRnZU1peGluQmFzZTogQ2FuRGlzYWJsZUN0b3IgJiB0eXBlb2YgTWF0QmFkZ2VCYXNlO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBNYXRCYWRnZVBvc2l0aW9uID0gJ2Fib3ZlIGFmdGVyJyB8ICdhYm92ZSBiZWZvcmUnIHwgJ2JlbG93IGJlZm9yZScgfCAnYmVsb3cgYWZ0ZXInO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBNYXRCYWRnZVNpemUgPSAnc21hbGwnIHwgJ21lZGl1bScgfCAnbGFyZ2UnO1xuLyoqIERpcmVjdGl2ZSB0byBkaXNwbGF5IGEgdGV4dCBiYWRnZS4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE1hdEJhZGdlIGV4dGVuZHMgX01hdEJhZGdlTWl4aW5CYXNlIGltcGxlbWVudHMgT25EZXN0cm95LCBDYW5EaXNhYmxlIHtcbiAgICBwcml2YXRlIF9kb2N1bWVudDtcbiAgICBwcml2YXRlIF9uZ1pvbmU7XG4gICAgcHJpdmF0ZSBfZWxlbWVudFJlZjtcbiAgICBwcml2YXRlIF9hcmlhRGVzY3JpYmVyO1xuICAgIC8qKiBAYnJlYWtpbmctY2hhbmdlIDguMC4wIE1ha2UgX3JlbmRlcmVyIGEgcmVxdWlyZWQgcGFyYW0gYW5kIHJlbW92ZSBfZG9jdW1lbnQuICovXG4gICAgcHJpdmF0ZSBfcmVuZGVyZXI/O1xuICAgIC8qKiBXaGV0aGVyIHRoZSBiYWRnZSBoYXMgYW55IGNvbnRlbnQuICovXG4gICAgX2hhc0NvbnRlbnQ6IGJvb2xlYW47XG4gICAgLyoqIFRoZSBjb2xvciBvZiB0aGUgYmFkZ2UuIENhbiBiZSBgcHJpbWFyeWAsIGBhY2NlbnRgLCBvciBgd2FybmAuICovXG4gICAgY29sb3I6IFRoZW1lUGFsZXR0ZTtcbiAgICBwcml2YXRlIF9jb2xvcjtcbiAgICAvKiogV2hldGhlciB0aGUgYmFkZ2Ugc2hvdWxkIG92ZXJsYXAgaXRzIGNvbnRlbnRzIG9yIG5vdCAqL1xuICAgIG92ZXJsYXA6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfb3ZlcmxhcDtcbiAgICAvKipcbiAgICAgKiBQb3NpdGlvbiB0aGUgYmFkZ2Ugc2hvdWxkIHJlc2lkZS5cbiAgICAgKiBBY2NlcHRzIGFueSBjb21iaW5hdGlvbiBvZiAnYWJvdmUnfCdiZWxvdycgYW5kICdiZWZvcmUnfCdhZnRlcidcbiAgICAgKi9cbiAgICBwb3NpdGlvbjogTWF0QmFkZ2VQb3NpdGlvbjtcbiAgICAvKiogVGhlIGNvbnRlbnQgZm9yIHRoZSBiYWRnZSAqL1xuICAgIGNvbnRlbnQ6IHN0cmluZztcbiAgICBwcml2YXRlIF9jb250ZW50O1xuICAgIC8qKiBNZXNzYWdlIHVzZWQgdG8gZGVzY3JpYmUgdGhlIGRlY29yYXRlZCBlbGVtZW50IHZpYSBhcmlhLWRlc2NyaWJlZGJ5ICovXG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgICBwcml2YXRlIF9kZXNjcmlwdGlvbjtcbiAgICAvKiogU2l6ZSBvZiB0aGUgYmFkZ2UuIENhbiBiZSAnc21hbGwnLCAnbWVkaXVtJywgb3IgJ2xhcmdlJy4gKi9cbiAgICBzaXplOiBNYXRCYWRnZVNpemU7XG4gICAgLyoqIFdoZXRoZXIgdGhlIGJhZGdlIGlzIGhpZGRlbi4gKi9cbiAgICBoaWRkZW46IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBfaGlkZGVuO1xuICAgIC8qKiBVbmlxdWUgaWQgZm9yIHRoZSBiYWRnZSAqL1xuICAgIF9pZDogbnVtYmVyO1xuICAgIHByaXZhdGUgX2JhZGdlRWxlbWVudDtcbiAgICBjb25zdHJ1Y3RvcihfZG9jdW1lbnQ6IGFueSwgX25nWm9uZTogTmdab25lLCBfZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIF9hcmlhRGVzY3JpYmVyOiBBcmlhRGVzY3JpYmVyLCBcbiAgICAvKiogQGJyZWFraW5nLWNoYW5nZSA4LjAuMCBNYWtlIF9yZW5kZXJlciBhIHJlcXVpcmVkIHBhcmFtIGFuZCByZW1vdmUgX2RvY3VtZW50LiAqL1xuICAgIF9yZW5kZXJlcj86IFJlbmRlcmVyMiB8IHVuZGVmaW5lZCk7XG4gICAgLyoqIFdoZXRoZXIgdGhlIGJhZGdlIGlzIGFib3ZlIHRoZSBob3N0IG9yIG5vdCAqL1xuICAgIGlzQWJvdmUoKTogYm9vbGVhbjtcbiAgICAvKiogV2hldGhlciB0aGUgYmFkZ2UgaXMgYWZ0ZXIgdGhlIGhvc3Qgb3Igbm90ICovXG4gICAgaXNBZnRlcigpOiBib29sZWFuO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqIEluamVjdHMgYSBzcGFuIGVsZW1lbnQgaW50byB0aGUgRE9NIHdpdGggdGhlIGNvbnRlbnQuICovXG4gICAgcHJpdmF0ZSBfdXBkYXRlVGV4dENvbnRlbnQ7XG4gICAgLyoqIENyZWF0ZXMgdGhlIGJhZGdlIGVsZW1lbnQgKi9cbiAgICBwcml2YXRlIF9jcmVhdGVCYWRnZUVsZW1lbnQ7XG4gICAgLyoqIFNldHMgdGhlIGFyaWEtbGFiZWwgcHJvcGVydHkgb24gdGhlIGVsZW1lbnQgKi9cbiAgICBwcml2YXRlIF91cGRhdGVIb3N0QXJpYURlc2NyaXB0aW9uO1xuICAgIC8qKiBBZGRzIGNzcyB0aGVtZSBjbGFzcyBnaXZlbiB0aGUgY29sb3IgdG8gdGhlIGNvbXBvbmVudCBob3N0ICovXG4gICAgcHJpdmF0ZSBfc2V0Q29sb3I7XG59XG4iXX0=