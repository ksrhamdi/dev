import { EventEmitter, ElementRef, OnChanges, SimpleChange, OnDestroy } from '@angular/core';
import { SourceFactory } from './sources/source.factory';
import { AvatarService } from './avatar.service';
/**
 * Universal avatar component that
 * generates avatar from different sources
 *
 * export
 * class AvatarComponent
 * implements {OnChanges}
 */
import * as ɵngcc0 from '@angular/core';
export declare class AvatarComponent implements OnChanges, OnDestroy {
    elementRef: ElementRef;
    sourceFactory: SourceFactory;
    private avatarService;
    round: boolean;
    size: number;
    textSizeRatio: number;
    bgColor: string;
    fgColor: string;
    borderColor: string;
    style: any;
    cornerRadius: number;
    facebook: string;
    twitter: string;
    google: string;
    vkontakte: string;
    skype: string;
    gravatar: string;
    github: string;
    custom: string;
    initials: string;
    value: string;
    placeholder: string;
    initialsSize: number;
    clickOnAvatar: EventEmitter<any>;
    isAlive: boolean;
    avatarSrc: string;
    avatarText: string;
    avatarStyle: any;
    hostStyle: any;
    private currentSource;
    private sources;
    constructor(elementRef: ElementRef, sourceFactory: SourceFactory, avatarService: AvatarService);
    onAvatarClicked(): void;
    /**
     * Detect inputs change
     *
     * param {{ [propKey: string]: SimpleChange }} changes
     *
     * memberof AvatarComponent
     */
    ngOnChanges(changes: {
        [propKey: string]: SimpleChange;
    }): void;
    /**
     * Fetch avatar source
     *
     * param {any} event
     *
     * memberOf AvatarComponent
     */
    fetchAvatarSource(event?: any): void;
    ngOnDestroy(): void;
    /**
     * Initialize the avatar component and its fallback system
     */
    private initializeAvatar;
    private sortAvatarSources;
    private buildTextAvatar;
    private buildImageAvatar;
    /**
     *
     * returns initials style
     *
     * memberOf AvatarComponent
     */
    private getInitialsStyle;
    /**
     *
     * returns image style
     *
     * memberOf AvatarComponent
     */
    private getImageStyle;
    /**
     * Fetch avatar image asynchrounsly.
     *
     * param {Source} source represents avatar source
     * memberof AvatarComponent
     */
    private fetchAndProcessAsyncAvatar;
    /**
     * Add avatar source
     *
     * param sourceType avatar source type e.g facebook,twitter, etc.
     * param sourceValue  source value e.g facebookId value, etc.
     */
    private addSource;
    private isSourceExist;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvatarComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AvatarComponent, "ngx-avatar", never, {
    "round": "round";
    "size": "size";
    "textSizeRatio": "textSizeRatio";
    "fgColor": "fgColor";
    "style": "style";
    "cornerRadius": "cornerRadius";
    "bgColor": "bgColor";
    "borderColor": "borderColor";
    "facebook": "facebookId";
    "twitter": "twitterId";
    "google": "googleId";
    "vkontakte": "vkontakteId";
    "skype": "skypeId";
    "gravatar": "gravatarId";
    "github": "githubId";
    "custom": "src";
    "initials": "name";
    "value": "value";
    "placeholder": "placeholder";
    "initialsSize": "initialsSize";
}, {
    "clickOnAvatar": "clickOnAvatar";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhdmF0YXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQVdBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5RkEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFNvdXJjZUZhY3RvcnkgfSBmcm9tICcuL3NvdXJjZXMvc291cmNlLmZhY3RvcnknO1xuaW1wb3J0IHsgQXZhdGFyU2VydmljZSB9IGZyb20gJy4vYXZhdGFyLnNlcnZpY2UnO1xuLyoqXG4gKiBVbml2ZXJzYWwgYXZhdGFyIGNvbXBvbmVudCB0aGF0XG4gKiBnZW5lcmF0ZXMgYXZhdGFyIGZyb20gZGlmZmVyZW50IHNvdXJjZXNcbiAqXG4gKiBleHBvcnRcbiAqIGNsYXNzIEF2YXRhckNvbXBvbmVudFxuICogaW1wbGVtZW50cyB7T25DaGFuZ2VzfVxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBBdmF0YXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XG4gICAgZWxlbWVudFJlZjogRWxlbWVudFJlZjtcbiAgICBzb3VyY2VGYWN0b3J5OiBTb3VyY2VGYWN0b3J5O1xuICAgIHByaXZhdGUgYXZhdGFyU2VydmljZTtcbiAgICByb3VuZDogYm9vbGVhbjtcbiAgICBzaXplOiBudW1iZXI7XG4gICAgdGV4dFNpemVSYXRpbzogbnVtYmVyO1xuICAgIGJnQ29sb3I6IHN0cmluZztcbiAgICBmZ0NvbG9yOiBzdHJpbmc7XG4gICAgYm9yZGVyQ29sb3I6IHN0cmluZztcbiAgICBzdHlsZTogYW55O1xuICAgIGNvcm5lclJhZGl1czogbnVtYmVyO1xuICAgIGZhY2Vib29rOiBzdHJpbmc7XG4gICAgdHdpdHRlcjogc3RyaW5nO1xuICAgIGdvb2dsZTogc3RyaW5nO1xuICAgIHZrb250YWt0ZTogc3RyaW5nO1xuICAgIHNreXBlOiBzdHJpbmc7XG4gICAgZ3JhdmF0YXI6IHN0cmluZztcbiAgICBnaXRodWI6IHN0cmluZztcbiAgICBjdXN0b206IHN0cmluZztcbiAgICBpbml0aWFsczogc3RyaW5nO1xuICAgIHZhbHVlOiBzdHJpbmc7XG4gICAgcGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICBpbml0aWFsc1NpemU6IG51bWJlcjtcbiAgICBjbGlja09uQXZhdGFyOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBpc0FsaXZlOiBib29sZWFuO1xuICAgIGF2YXRhclNyYzogc3RyaW5nO1xuICAgIGF2YXRhclRleHQ6IHN0cmluZztcbiAgICBhdmF0YXJTdHlsZTogYW55O1xuICAgIGhvc3RTdHlsZTogYW55O1xuICAgIHByaXZhdGUgY3VycmVudFNvdXJjZTtcbiAgICBwcml2YXRlIHNvdXJjZXM7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudFJlZjogRWxlbWVudFJlZiwgc291cmNlRmFjdG9yeTogU291cmNlRmFjdG9yeSwgYXZhdGFyU2VydmljZTogQXZhdGFyU2VydmljZSk7XG4gICAgb25BdmF0YXJDbGlja2VkKCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogRGV0ZWN0IGlucHV0cyBjaGFuZ2VcbiAgICAgKlxuICAgICAqIHBhcmFtIHt7IFtwcm9wS2V5OiBzdHJpbmddOiBTaW1wbGVDaGFuZ2UgfX0gY2hhbmdlc1xuICAgICAqXG4gICAgICogbWVtYmVyb2YgQXZhdGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczoge1xuICAgICAgICBbcHJvcEtleTogc3RyaW5nXTogU2ltcGxlQ2hhbmdlO1xuICAgIH0pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIEZldGNoIGF2YXRhciBzb3VyY2VcbiAgICAgKlxuICAgICAqIHBhcmFtIHthbnl9IGV2ZW50XG4gICAgICpcbiAgICAgKiBtZW1iZXJPZiBBdmF0YXJDb21wb25lbnRcbiAgICAgKi9cbiAgICBmZXRjaEF2YXRhclNvdXJjZShldmVudD86IGFueSk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplIHRoZSBhdmF0YXIgY29tcG9uZW50IGFuZCBpdHMgZmFsbGJhY2sgc3lzdGVtXG4gICAgICovXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplQXZhdGFyO1xuICAgIHByaXZhdGUgc29ydEF2YXRhclNvdXJjZXM7XG4gICAgcHJpdmF0ZSBidWlsZFRleHRBdmF0YXI7XG4gICAgcHJpdmF0ZSBidWlsZEltYWdlQXZhdGFyO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogcmV0dXJucyBpbml0aWFscyBzdHlsZVxuICAgICAqXG4gICAgICogbWVtYmVyT2YgQXZhdGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRJbml0aWFsc1N0eWxlO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogcmV0dXJucyBpbWFnZSBzdHlsZVxuICAgICAqXG4gICAgICogbWVtYmVyT2YgQXZhdGFyQ29tcG9uZW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRJbWFnZVN0eWxlO1xuICAgIC8qKlxuICAgICAqIEZldGNoIGF2YXRhciBpbWFnZSBhc3luY2hyb3Vuc2x5LlxuICAgICAqXG4gICAgICogcGFyYW0ge1NvdXJjZX0gc291cmNlIHJlcHJlc2VudHMgYXZhdGFyIHNvdXJjZVxuICAgICAqIG1lbWJlcm9mIEF2YXRhckNvbXBvbmVudFxuICAgICAqL1xuICAgIHByaXZhdGUgZmV0Y2hBbmRQcm9jZXNzQXN5bmNBdmF0YXI7XG4gICAgLyoqXG4gICAgICogQWRkIGF2YXRhciBzb3VyY2VcbiAgICAgKlxuICAgICAqIHBhcmFtIHNvdXJjZVR5cGUgYXZhdGFyIHNvdXJjZSB0eXBlIGUuZyBmYWNlYm9vayx0d2l0dGVyLCBldGMuXG4gICAgICogcGFyYW0gc291cmNlVmFsdWUgIHNvdXJjZSB2YWx1ZSBlLmcgZmFjZWJvb2tJZCB2YWx1ZSwgZXRjLlxuICAgICAqL1xuICAgIHByaXZhdGUgYWRkU291cmNlO1xuICAgIHByaXZhdGUgaXNTb3VyY2VFeGlzdDtcbn1cbiJdfQ==