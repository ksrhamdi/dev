import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AvatarConfigService } from './avatar-config.service';
import { AvatarSource } from './sources/avatar-source.enum';
/**
 * list of Supported avatar sources
 */
import * as ɵngcc0 from '@angular/core';
export declare const defaultSources: AvatarSource[];
/**
 * list of default colors
 */
export declare const defaultColors: string[];
/**
 * Provides utilities methods related to Avatar component
 */
export declare class AvatarService {
    private http;
    private avatarConfigService;
    avatarSources: AvatarSource[];
    avatarColors: string[];
    constructor(http: HttpClient, avatarConfigService: AvatarConfigService);
    fetchAvatar(avatarUrl: string): Observable<any>;
    getRandomColor(avatarText: string): string;
    copmareSources(sourceType1: AvatarSource, sourceType2: AvatarSource): number;
    isSource(source: string): boolean;
    isTextAvatar(sourceType: AvatarSource): boolean;
    private overrideAvatarSources;
    private overrideAvatarColors;
    private calculateAsciiCode;
    private getSourcePriority;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AvatarService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AvatarService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZhdGFyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiYXZhdGFyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFPQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBdmF0YXJDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi9hdmF0YXItY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgQXZhdGFyU291cmNlIH0gZnJvbSAnLi9zb3VyY2VzL2F2YXRhci1zb3VyY2UuZW51bSc7XG4vKipcbiAqIGxpc3Qgb2YgU3VwcG9ydGVkIGF2YXRhciBzb3VyY2VzXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNvbnN0IGRlZmF1bHRTb3VyY2VzOiBBdmF0YXJTb3VyY2VbXTtcbi8qKlxuICogbGlzdCBvZiBkZWZhdWx0IGNvbG9yc1xuICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBkZWZhdWx0Q29sb3JzOiBzdHJpbmdbXTtcbi8qKlxuICogUHJvdmlkZXMgdXRpbGl0aWVzIG1ldGhvZHMgcmVsYXRlZCB0byBBdmF0YXIgY29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEF2YXRhclNlcnZpY2Uge1xuICAgIHByaXZhdGUgaHR0cDtcbiAgICBwcml2YXRlIGF2YXRhckNvbmZpZ1NlcnZpY2U7XG4gICAgYXZhdGFyU291cmNlczogQXZhdGFyU291cmNlW107XG4gICAgYXZhdGFyQ29sb3JzOiBzdHJpbmdbXTtcbiAgICBjb25zdHJ1Y3RvcihodHRwOiBIdHRwQ2xpZW50LCBhdmF0YXJDb25maWdTZXJ2aWNlOiBBdmF0YXJDb25maWdTZXJ2aWNlKTtcbiAgICBmZXRjaEF2YXRhcihhdmF0YXJVcmw6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PjtcbiAgICBnZXRSYW5kb21Db2xvcihhdmF0YXJUZXh0OiBzdHJpbmcpOiBzdHJpbmc7XG4gICAgY29wbWFyZVNvdXJjZXMoc291cmNlVHlwZTE6IEF2YXRhclNvdXJjZSwgc291cmNlVHlwZTI6IEF2YXRhclNvdXJjZSk6IG51bWJlcjtcbiAgICBpc1NvdXJjZShzb3VyY2U6IHN0cmluZyk6IGJvb2xlYW47XG4gICAgaXNUZXh0QXZhdGFyKHNvdXJjZVR5cGU6IEF2YXRhclNvdXJjZSk6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBvdmVycmlkZUF2YXRhclNvdXJjZXM7XG4gICAgcHJpdmF0ZSBvdmVycmlkZUF2YXRhckNvbG9ycztcbiAgICBwcml2YXRlIGNhbGN1bGF0ZUFzY2lpQ29kZTtcbiAgICBwcml2YXRlIGdldFNvdXJjZVByaW9yaXR5O1xufVxuIl19